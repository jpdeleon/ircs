#!/usr/bin/env python

from glob import glob
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
try:
    from astropy.io import fits as pf
except:
    import pyfits as pf
from tqdm import tqdm
import argparse

from ircs import utils, crop, remove_bg, make_flat, make_bpmask

input_dir = '/mnt/sda1/data/ircs_pol'
#input_dir = '/mnt/B838B30438B2C124/data/ircs_pol'
output_dir = '/home/Jerome/ircs_pol_output'

message="Basic IRCS Data Reduction Pipeline:\n* inspecting raw data\n* making dark frame\n* making cal-flat frame\n* masking bad pixels\n* making sky-flat frame\n* subtracting flat-field\n* subtracting sky frame\n* interpolating for bad pixel\n* measuring position offset\n* shifting and combining images (image registration)\n* analyzing standard star\n* estimating limiting magnitude\n\nNOTE:\nBefore running this script, run first 'image_sorter'\n"
parser = argparse.ArgumentParser(description=message, usage='use "%(prog)s --help" for more information', formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--box_size', help='size of crop box (in pixels) centered on point source; default=100 pix', type=int, default=None)
parser.add_argument('--skip_every', help='skip every nth frame per band e.g. 5', type=int, default=None)
parser.add_argument('--show_psf',help='show psf of OBJECT?', type=bool, default=False)
#parser.add_argument('--centroids', help'', type=int)
args = parser.parse_args()

skip_every = args.skip_every
box_size = args.box_size
show_psf = args.show_psf

#mas per pix
ircs_pix_size = 20.57*1e-3

if box_size is not None:
    print('\nUsing `box_size` ={}'.format(box_size))

else: #if None
    box_size=200
    print('Using default `box_size` ={}'.format(box_size))

#initialize
print('-----------------------')
print('Checking raw data frames')
print('-----------------------\n')

#if textfiles exists: read: on, off, obj = read_files()
if os.listdir(input_dir) != []:
    try:
        obj=np.loadtxt(input_dir+'/object.txt', dtype=str, delimiter=',')
        flat_off=np.loadtxt(input_dir+'/flat_off.txt', dtype=str, delimiter=',')
        flat_on=np.loadtxt(input_dir+'/flat_on.txt', dtype=str, delimiter=',')
        #others=np.loadtxt(input_dir+'/others.txt', dtype=str, delimiter=',')
    except:
        print('Missing text files!\n')

'''
CHECK FOR SATURATED FRAMES
'''
# if False:
#     utils.check_frame(obj, calc='subtract', show_image=True, cmap='jet')

print('\n-----------------------')
print(' Creating Flat ')
print('-----------------------\n')

calflat_img = make_flat.calflat(flat_on, flat_off, check_frames=False,show_image=False, save_fits=True, cmap='gray')

print('-----------------------')
print('Creating bad pixel mask')
print('-----------------------\n')

bpmask_img = make_bpmask.bp_mask(calflat_img, high=2500, low=0.3, show_image=True, save_fits=True, cmap='gray')

if utils.proceed():
    pass
else:
    print('\n-----------------------')
    print('        TEMINATED ')
    print('-----------------------\n')
    sys.exit()

# print('-----------------------')
# print('  Creating Sky Flat')
# print('-----------------------\n')
'''
calflat might work as flat for the meantime
'''
#skyflat_img = make_flat.skyflat(obj, bpmask_img, show_image=True, save_fits=True, cmap='gray')

print('\n-----------------------')
print('     Flat Fielding ')
print('-----------------------\n')
make_flat.flat_div(obj, 'calflat', show_image=True, save_fits=True, cmap='gray')

if utils.proceed():
    pass
else:
    print('\n-----------------------')
    print('        TEMINATED ')
    print('-----------------------\n')
    sys.exit()

print('\n-----------------------')
print(' Distortion Correction ')
print('-----------------------\n')

if utils.proceed():
    pass
else:
    print('\n-----------------------')
    print('        TEMINATED ')
    print('-----------------------\n')
    sys.exit()


print('\n-----------------------')
print('Cropping raw data')
print('-----------------------\n')

#crop.extract_oe(obj, box_size, show_oe_image=False, save_fits=True, check_if_saturated=True, cmap='gray')

if utils.proceed():
    pass
else:
    print('\n-----------------------')
    print('        TEMINATED ')
    print('-----------------------\n')
    sys.exit()


print('\n-----------------------')
print(' Subtracting background ')
print('-----------------------\n')
#remove_bg.rm_bg(obj, box_size, show_before_after=False, save_fits=False, cmap='gray')

if utils.proceed():
    pass
else:
    print('\n-----------------------')
    print('        TEMINATED ')
    print('-----------------------\n')
    sys.exit()

###check psf
#fwhm,constant=40,3000
# if show_psf == True:
#     print('Checking psf...\n')
#     '''
#     skip_every does not make sense to be input from terminal
#     '''
#     mean_psf, centers = utils.check_psf(pol,centroid_left,skip_every=5)
#     #print(mean_psf,centers)
#     print('Plotting psf...\n')
#     popt, pcov= utils.fit_psf(pol,mean_psf, centers)





print('\n-----------------------')
print('         DONE')
print('-----------------------\n')
